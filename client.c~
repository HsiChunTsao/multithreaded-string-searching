#include "client.h"
#include<netinet/in.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<dirent.h>

int check(char *str) {
	int i;
	char delim[] = "\"";
	char *dupstr = strdup(str);
	char *saveptr = NULL;
	char *substr = NULL;
	int str_count = 0;
	int count = 0;

	if(str[0]!='Q' || str[1]!='u' || str[2]!='e' || str[3]!='r' || str[4]!='y' || str[5]!=' ' || str[6]!='\"') {
		return 0;
	}

	for(i=0;str[i]!='\0';i++) {
		if(str[i] == '\"')	count++;
	}
	if(count%2 != 0) {
		return 0;
	}

	substr = strtok_r(dupstr, delim, &saveptr);
	printf("hehe\n");
	do {
		if(strcmp(substr, " ") != 0) {
			str_count++;
		}
		substr = strtok_r(NULL, delim, &saveptr);
	} while(substr);
	free(dupstr);
	if(count/2 != (str_count-1)) {
		return 0;
	}

	return 1;
}

int main(int argc, char *argv[])
{
	char localhost[64];
	int port;
	int i,ch;
	char delim[] = "\"";
	
	// LOCALHOST
	if(strcmp(argv[1], "-h") == 0) {
		strncpy(localhost, argv[2], strlen(argv[2]));
	}
	else if(strcmp(argv[3], "-h") == 0) {
		strncpy(localhost, argv[4], strlen(argv[4]));
	}
	
	// PORT
	if(strcmp(argv[1], "-p") == 0) {
		port = atoi(argv[2]);
	}
	else if(strcmp(argv[3], "-p") == 0) {
		port = atoi(argv[4]);
	}
	
	while(1) {
		// set socket's address info
		struct sockaddr_in client_addr;
		bzero(&client_addr, sizeof(client_addr));
		client_addr.sin_family = AF_INET;
		client_addr.sin_addr.s_addr = htons(INADDR_ANY);
		client_addr.sin_port = htons(0);
	
		// creat a stream socket
		int client_socket = socket(AF_INET, SOCK_STREAM, 0);
		if(client_socket < 0) {
			printf("creat socket failed\n");
			exit(1);
		}
	
		// bind
		if(bind(client_socket, (struct sockaddr*)&client_addr, sizeof(client_addr))){
			printf("client bind port failed\n");
			exit(1);
		}
	
	
		struct sockaddr_in server_addr;
		bzero (&server_addr, sizeof(server_addr));
		server_addr.sin_family = AF_INET;

		if(inet_aton(localhost, &server_addr.sin_addr) == 0){
			printf("server IP address error\n");
			exit(1);
		}
		server_addr.sin_port = htons(port);
		socklen_t server_addr_length = sizeof(server_addr);

		if(connect(client_socket, (struct sockaddr*)&server_addr, server_addr_length) < 0) {
			printf("cannot connect to %s\n", localhost);
			exit(1);
		}
	
		char buffer[4096];
		gets(buffer);
		/////////////////////
		//ch = check(buffer);
		printf("147\n");
		ch = 1;
		if(ch == 0) {
			printf("The strings format is not correct\n");
		}
		else {
			printf("1\n");
			char * const dupstr = strdup(buffer);
			char *saveptr = NULL;
			char *substr = NULL;
			int count = 0;
			int flag = 0;
			substr = strtok_r(dupstr, delim, &saveptr);
			printf("2\n");
			do {
				if(strcmp(substr, " ") != 0) {
					if(flag != 0) {
						send(client_socket, buffer, 4096, 0);
					}
					flag++;
				}
			} while(substr);
			free(dupstr);

			printf("2\n");

			while(recv(client_socket, buffer, 4096, 0) > 0) {
				printf("%s\n",buffer);
			}
		}

		/////////////////////
		//send(client_socket, buffer, 4096, 0);
		/*recv(client_socket, buffer, 4096, 0);
		printf("%s\n",buffer);
		recv(client_socket, buffer, 4096, 0);
		printf("%s\n",buffer);*/
		

		close(client_socket);
	}
	return 0;
}
